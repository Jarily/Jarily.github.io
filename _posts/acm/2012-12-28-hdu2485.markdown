---
layout: post
title:  HDU2485(Destroying the bus stations)BFS+DFS
author: "R. Liao" 
categories: acm
tags: ACM
---

### 链接
[Destroying the bus stations](http://acm.hdu.edu.cn/showproblem.php?pid=2485)

### 题意    
有n个车站, 车站间为有向边, 可能有重, 无自环；  
有军队要从1号站去n号站, 每条边要走1分钟；  
若炸掉一个车站则所有与此站相连的边都不可走；  
问至少炸多少站使得军队到达n号站的时间超过k分钟；  

### 分析  
对于一条边（u,v）  
*dist[1][u]+dist[v][n]+1<=k*  
那么如果当前1->u的最短路径大于k则说明这条路径上的点u、v可以暂时不予考虑  
即只需考虑 *dist[1][u]+dist[v][n]+1<=k*的情况，那么根据dist重新构图；  
满足*dist[1][u]+dist[v][n]+1<=k*的点(u,v)就加入图中；  
根据题意就是要保证这个图不能连通，那么求出这个图的点连通度就OK了  

### 算法  
最短路的算法几个算法在这个题上都可以用；  
但是又由于它数据的特殊性，即每条边的权值为1；  
所以可以用bfs(相对于几种最短路的算法效率较高)来求每一次的最短路径；  
然后用dfs实现删除最短路径上的点即可；

### 代码  
```
/**============================================================================
#	   @author	         Jarily
#	   @name		 HDOJ 2485
#	   @date		 2012/12/28
============================================================================**/
#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;

const int N=55;

int dist[N];
int map[N][N];
bool visit[N];

int n,m,k,tot;
bool flag;

queue<int> Q;
vector<int> edge[N];

void bfs()
{
    memset(dist,-1,sizeof(dist));
    while(!Q.empty())
        Q.pop();
    Q.push(1);
    dist[1]=0;
    
    while(!Q.empty())
    {
        int s=Q.front();
        Q.pop();
        for(int i=0; i<edge[s].size(); i++)
        {
            int x=edge[s][i];
            if(!visit[x]&&dist[x]==-1)
            {
                Q.push(x);
                dist[x]=s;
                if(x==n)
                    return ;
            }
        }
    }
}

void dfs(int x)
{
    if(flag)
        return;
    bfs();
    if(dist[n]==-1)
    {
        flag=1;
        return ;
    }
    int num=0;
    for(int i=n; i>1; i=dist[i])
    {
        num++;
        map[x][num]=i;
    }
    if(num>k)
    {
        flag=1;
        return ;
    }
    if(x>tot)
        return;
    for(int i=2; i<=num; i++)
    {
        visit[map[x][i]]=1;
        dfs(x+1);
        visit[map[x][i]]=0;
    }
}

int solve()
{
    flag=0;
    for(int i=0; i<=n; i++)
    {
        tot=i;
        memset(visit,0,sizeof(visit));
        dfs(1);
        if(flag)
            return i;
    }
    return n;
}

int main()
{
    //freopen("C:\\Users\\Administrator\\Desktop\\kd.txt","r",stdin);
    while(~scanf("%d%d%d",&n,&m,&k))
    {
        if(n+m+k==0)
            break;

        for(int i=0; i<=n; i++)
            edge[i].clear();

        for(int i=0; i<m; i++)
        {
            int u,v;
            scanf("%d%d",&u,&v);
            edge[u].push_back(v);
        }

        printf("%d\n",solve());
    }
    return 0;
}
```
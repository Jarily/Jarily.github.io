---
layout: post
title:      Ural1297(Palindrome)求最长回文子串(后缀数组)
author: "R. Liao" 
categories: acm
tags: ACM
---

### 链接  
[Palindrome](http://acm.timus.ru/problem.aspx?space=1&num=1297)

### 题意         
给定一个字符串,求最长回文子串;


### 分析      
穷举每一位，然后计算以这个字符为中心的最长回文子串;  
注意这里要分两种情况，一是回文子串的长度为奇数，二是长度为偶数;  
两种情况都可以转化为求一个后缀和一个反过来写的后缀的最长公共前缀;  
即将整个字符串反过来写在原字符串后面，中间用一个特殊的字符隔开;  
这样就把问题变为了求这个新的字符串的某两个后缀的最长公共前缀;

根据利用后缀数组sa求出的height数组的性质;  
可以求两个后缀的最长公共前缀可以转化为求某个区间上的最小值;  
即求区间最值问题(RMQ问题);　　　　


#### 问题补充　　
* 后缀是指从某个位置i开始到整个串末尾结束的一个特殊子串;
字符串r的从第i个字符开始的后缀表示为Suffix(i),也就是Suffix(i)=r[i...len(r)];

* 后缀数组保存的是一个字符串的所有后缀的排序结果;
其中SA[i]保存的是字符串所有的后缀中第i小的后缀的开头位置;

* 定义height[i]=suffix(sa[i-1])和suffix(sa[i])的最长公共前缀，
也就是排名相邻的两个后缀的最长公共前缀;

### 代码    

```
/**============================================================================
#	   @author	         Jarily
#	   @name		 URAL 1279
#	   @date		 2013/03/23
============================================================================**/
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<climits>
#include<algorithm>
using namespace std;

const int N=2010;
const int M=128;//r数组的最大值

#define F(x) ((x)/3+((x)%3==1?0:tb))
#define G(x) ((x)<tb?(x)*3+1:((x)-tb)*3+2)

int wa[N],wb[N],wv[N],_ws[N];

int c0(int *r,int a,int b)
{
    return r[a]==r[b]&&r[a+1]==r[b+1]&&r[a+2]==r[b+2];
}

int c12(int k,int *r,int a,int b)
{
    if(k==2)
        return r[a]<r[b]||r[a]==r[b]&&c12(1,r,a+1,b+1);
    else
        return r[a]<r[b]||r[a]==r[b]&&wv[a+1]<wv[b+1];
}

void sort(int *r,int *a,int *b,int n,int m)
{
    for(int i=0; i<n; i++)
        wv[i]=r[a[i]];
    for(int i=0; i<m; i++)
        _ws[i]=0;
    for(int i=0; i<n; i++)
        _ws[wv[i]]++;
    for(int i=1; i<m; i++)
        _ws[i]+=_ws[i-1];
    for(int i=n-1; i>=0; i--)
        b[--_ws[wv[i]]]=a[i];
    return;
}

void dc3(int *r,int *sa,int n,int m)
{
    int i,j,*rn=r+n,*san=sa+n,ta=0,tb=(n+1)/3,tbc=0,p;
    r[n]=r[n+1]=0;
    for(i=0; i<n; i++)
    {
        if(i%3!=0)
            wa[tbc++]=i;
    }
    sort(r+2,wa,wb,tbc,m);
    sort(r+1,wb,wa,tbc,m);
    sort(r,wa,wb,tbc,m);
    for(p=1,rn[F(wb[0])]=0,i=1; i<tbc; i++)
    {
        rn[F(wb[i])]=c0(r,wb[i-1],wb[i])?p-1:p++;
    }
    if(p<tbc)
        dc3(rn,san,tbc,p);
    else
    {
        for(i=0; i<tbc; i++)
            san[rn[i]]=i;
    }
    for(i=0; i<tbc; i++)
    {
        if(san[i]<tb)
            wb[ta++]=san[i]*3;
    }
    if(n%3==1)
        wb[ta++]=n-1;
    sort(r,wb,wa,ta,m);
    for(i=0; i<tbc; i++)
        wv[wb[i]=G(san[i])]=i;
    for(i=0,j=0,p=0; i<ta && j<tbc; p++)
    {
        sa[p]=c12(wb[j]%3,r,wa[i],wb[j])?wa[i++]:wb[j++];
    }
    for(; i<ta; p++)
        sa[p]=wa[i++];
    for(; j<tbc; p++)
        sa[p]=wb[j++];
    return;
}

int rank[N],height[N];

void calheight(int *r,int *sa,int n)
{
    int i,j,k=0;
    for(i=1; i<=n; i++)
        rank[sa[i]]=i;
    for(i=0; i<n; height[rank[i++]]=k)
    {
        for(k?k--:0,j=sa[rank[i]-1]; r[i+k]==r[j+k]; k++);
    }
    return;
}

int RMQ[N];
int mm[N];
int best[20][N];

void initRMQ(int n)
{
    mm[0]=-1;
    for(int i=1; i<=n; i++)
    {
        mm[i]=((i&(i-1))==0)?mm[i-1]+1:mm[i-1];
    }
    for(int i=1; i<=n; i++)
        best[0][i]=i;
    for(int i=1; i<=mm[n]; i++)
        for(int j=1; j<=n+1-(1<<i); j++)
        {
            int a=best[i-1][j];
            int b=best[i-1][j+(1<<(i-1))];
            if(RMQ[a]<RMQ[b])
                best[i][j]=a;
            else
                best[i][j]=b;
        }
    return;
}

int askRMQ(int a,int b)
{
    int t=mm[b-a+1];
    b-=(1<<t)-1;
    a=best[t][a];
    b=best[t][b];
    return RMQ[a]<RMQ[b]?a:b;
}

int lcp(int a,int b)
{

    a=rank[a];
    b=rank[b];
    if(a>b)
    {
        int t=a;
        a=b;
        b=t;
    }
    return(height[askRMQ(a+1,b)]);
}

char st[N];
int r[N*3],sa[N*3];

int main()
{
    //freopen("C:\\Users\\Administrator\\Desktop\\kd.txt","r",stdin);
    scanf("%s",st);
    int len=strlen(st);
    for(int i=0; i<len; i++)
        r[i]=st[i];
    r[len]=1;
    for(int i=0; i<len; i++)
        r[i+len+1]=st[len-1-i];
    int n=len+len+1;
    r[n]=0;
    dc3(r,sa,n+1,M);
    calheight(r,sa,n);
    for(int i=1; i<=n; i++)
        RMQ[i]=height[i];
    initRMQ(n);
    int ans=0;
    int w;
    for(int i=0; i<len; i++)
    {
        int k=lcp(i,n-i);
        if(k*2>ans)
        {
            ans=k*2;
            w=i-k;
        }
        k=lcp(i,n-i-1);
        if(k*2-1>ans)
        {
            ans=k*2-1;
            w=i-k+1;
        }
    }
    st[w+ans]=0;
    printf("%s\n",st+w);
    return 0;
}


```
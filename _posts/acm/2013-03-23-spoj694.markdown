---
layout: post
title:       Spoj694(Distinct Substrings)求字符串不相同的子串个数(后缀数组)
author: "R. Liao" 
categories: acm
tags: ACM
---

### 链接  
[DISUBSTR - Distinct Substrings](http://www.spoj.com/problems/DISUBSTR/)

### 题意         
给定一个字符串，求不相同的子串的个数;


### 分析      
每个子串一定是某个后缀的前缀;  
那么原问题等价于求所有后缀之间的不相同的前缀的个数;  
如果所有的后缀按照suffix(sa[1]), suffix(sa[2]),suffix(sa[3]),……,suffix(sa[n])的顺序计算;  
可以看出对于每一次新加进来的后缀suffix(sa[k]),它将产生n-sa[k]+1个新的前缀;  
但是其中有height[k]个是和前面的字符串的前缀是相同的;  
所以suffix(sa[k])将“贡献”出n-sa[k]+1-height[k]个不同的子串;  
所以将其累加后便是原问题的答案,即一个字符串不相同子串的个数;

#### 问题补充  
* 后缀是指从某个位置i开始到整个串末尾结束的一个特殊子串;  
字符串r的从第i个字符开始的后缀表示为Suffix(i),也就是Suffix(i)=r[i...len(r)];

* 后缀数组保存的是一个字符串的所有后缀的排序结果;  
其中SA[i]保存的是字符串所有的后缀中第i小的后缀的开头位置;

* 定义height[i]=suffix(sa[i-1])和suffix(sa[i])的最长公共前缀，  
也就是排名相邻的两个后缀的最长公共前缀;

### 代码    

```
/**============================================================================
#	   @author	         Jarily
#	   @name		 SPOJ 694
#	   @date		 2013/03/23
============================================================================**/
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<climits>
#include<algorithm>
using namespace std;

const int N=1010;
const int M=128;//r数组的最大值

#define F(x) ((x)/3+((x)%3==1?0:tb))
#define G(x) ((x)<tb?(x)*3+1:((x)-tb)*3+2)

int wa[N],wb[N],wv[N],_ws[M];

int c0(int *r,int a,int b)
{
    return r[a]==r[b]&&r[a+1]==r[b+1]&&r[a+2]==r[b+2];
}

int c12(int k,int *r,int a,int b)
{
    if(k==2)
        return r[a]<r[b]||r[a]==r[b]&&c12(1,r,a+1,b+1);
    else
        return r[a]<r[b]||r[a]==r[b]&&wv[a+1]<wv[b+1];
}

void sort(int *r,int *a,int *b,int n,int m)
{
    for(int i=0; i<n; i++)
        wv[i]=r[a[i]];
    for(int i=0; i<m; i++)
        _ws[i]=0;
    for(int i=0; i<n; i++)
        _ws[wv[i]]++;
    for(int i=1; i<m; i++)
        _ws[i]+=_ws[i-1];
    for(int i=n-1; i>=0; i--)
        b[--_ws[wv[i]]]=a[i];
    return;
}

void dc3(int *r,int *sa,int n,int m)
{
    int i,j,*rn=r+n,*san=sa+n,ta=0,tb=(n+1)/3,tbc=0,p;
    r[n]=r[n+1]=0;
    for(i=0; i<n; i++)
    {
        if(i%3!=0)
            wa[tbc++]=i;
    }
    sort(r+2,wa,wb,tbc,m);
    sort(r+1,wb,wa,tbc,m);
    sort(r,wa,wb,tbc,m);
    for(p=1,rn[F(wb[0])]=0,i=1; i<tbc; i++)
    {
        rn[F(wb[i])]=c0(r,wb[i-1],wb[i])?p-1:p++;
    }
    if(p<tbc)
        dc3(rn,san,tbc,p);
    else
    {
        for(i=0; i<tbc; i++)
            san[rn[i]]=i;
    }
    for(i=0; i<tbc; i++)
    {
        if(san[i]<tb)
            wb[ta++]=san[i]*3;
    }
    if(n%3==1)
        wb[ta++]=n-1;
    sort(r,wb,wa,ta,m);
    for(i=0; i<tbc; i++)
        wv[wb[i]=G(san[i])]=i;
    for(i=0,j=0,p=0; i<ta && j<tbc; p++)
    {
        sa[p]=c12(wb[j]%3,r,wa[i],wb[j])?wa[i++]:wb[j++];
    }
    for(; i<ta; p++)
        sa[p]=wa[i++];
    for(; j<tbc; p++)
        sa[p]=wb[j++];
    return;
}

int rank[N],height[N];

void calheight(int *r,int *sa,int n)
{
    int i,j,k=0;
    for(i=1; i<=n; i++)
        rank[sa[i]]=i;
    for(i=0; i<n; height[rank[i++]]=k)
    {
        for(k?k--:0,j=sa[rank[i]-1]; r[i+k]==r[j+k]; k++);
    }
    return;
}

char s[N];
int r[N*3],sa[N*3];

int main()
{
    //freopen("C:\\Users\\Administrator\\Desktop\\kd.txt","r",stdin);
    int t;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%s",s);
        int n=strlen(s);
        for(int i=0; i<n; i++)
            r[i]=s[i];
        r[n]=0;
        dc3(r,sa,n+1,128);
        calheight(r,sa,n);
        int ans=n*(n+1)>>1;
        for(int i=1; i<=n; i++)
            ans-=height[i];
        printf("%d\n",ans);
    }
    return 0;
}



```